
Prelaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000738  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ab  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004f  00000000  00000000  00001a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_Init>:

// adc.c
#include "adc.h"

void ADC_Init() {
	ADMUX = (1 << REFS0);  // Voltaje de referencia AVcc
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Habilitar ADC, prescaler 128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <ADC_Read>:
}

uint16_t ADC_Read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07);  // Seleccionar canal
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
  94:	98 7f       	andi	r25, 0xF8	; 248
  96:	87 70       	andi	r24, 0x07	; 7
  98:	89 2b       	or	r24, r25
  9a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);  // Iniciar conversión
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));  // Esperar fin de conversión
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	86 fd       	sbrc	r24, 6
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <ADC_Read+0x18>
	return ADC;
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b6:	08 95       	ret

000000b8 <main>:

#include "pwm.h"
#include "adc.h"

int main(void) {
	PWM_Init();
  b8:	0e 94 74 00 	call	0xe8	; 0xe8 <PWM_Init>
	ADC_Init();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <ADC_Init>
	
	while(1) {
		uint16_t adc_value = ADC_Read(0);  // Leer ADC0
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
		uint16_t pulse_width = ((adc_value * 1000UL) / 1023) + 1000;  // Escalar a 1000-2000
  c6:	9c 01       	movw	r18, r24
  c8:	a8 ee       	ldi	r26, 0xE8	; 232
  ca:	b3 e0       	ldi	r27, 0x03	; 3
  cc:	0e 94 ab 00 	call	0x156	; 0x156 <__umulhisi3>
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	33 e0       	ldi	r19, 0x03	; 3
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	0e 94 89 00 	call	0x112	; 0x112 <__udivmodsi4>
		PWM_SetDutyCycle(pulse_width);
  dc:	c9 01       	movw	r24, r18
  de:	88 51       	subi	r24, 0x18	; 24
  e0:	9c 4f       	sbci	r25, 0xFC	; 252
  e2:	0e 94 84 00 	call	0x108	; 0x108 <PWM_SetDutyCycle>
  e6:	ec cf       	rjmp	.-40     	; 0xc0 <main+0x8>

000000e8 <PWM_Init>:

// pwm.c
#include "pwm.h"

void PWM_Init() {
	DDRB |= (1 << DDB1);  // Configura OC1A (PB1) como salida
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	84 b9       	out	0x04, r24	; 4
	
	// Modo PWM Fase-Frecuencia Correcta con ICR1 como TOP
	TCCR1A = (1 << COM1A1);          // Modo no-invertido
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11);  // Modo 8, prescaler 8
  f4:	82 e1       	ldi	r24, 0x12	; 18
  f6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	
	ICR1 = 20000;  // Periodo de 20ms (50Hz)
  fa:	80 e2       	ldi	r24, 0x20	; 32
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 102:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 106:	08 95       	ret

00000108 <PWM_SetDutyCycle>:
}

void PWM_SetDutyCycle(uint16_t duty) {
	OCR1A = duty;  // Establece el ciclo de trabajo
 108:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 110:	08 95       	ret

00000112 <__udivmodsi4>:
 112:	a1 e2       	ldi	r26, 0x21	; 33
 114:	1a 2e       	mov	r1, r26
 116:	aa 1b       	sub	r26, r26
 118:	bb 1b       	sub	r27, r27
 11a:	fd 01       	movw	r30, r26
 11c:	0d c0       	rjmp	.+26     	; 0x138 <__udivmodsi4_ep>

0000011e <__udivmodsi4_loop>:
 11e:	aa 1f       	adc	r26, r26
 120:	bb 1f       	adc	r27, r27
 122:	ee 1f       	adc	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	a2 17       	cp	r26, r18
 128:	b3 07       	cpc	r27, r19
 12a:	e4 07       	cpc	r30, r20
 12c:	f5 07       	cpc	r31, r21
 12e:	20 f0       	brcs	.+8      	; 0x138 <__udivmodsi4_ep>
 130:	a2 1b       	sub	r26, r18
 132:	b3 0b       	sbc	r27, r19
 134:	e4 0b       	sbc	r30, r20
 136:	f5 0b       	sbc	r31, r21

00000138 <__udivmodsi4_ep>:
 138:	66 1f       	adc	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	88 1f       	adc	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	1a 94       	dec	r1
 142:	69 f7       	brne	.-38     	; 0x11e <__udivmodsi4_loop>
 144:	60 95       	com	r22
 146:	70 95       	com	r23
 148:	80 95       	com	r24
 14a:	90 95       	com	r25
 14c:	9b 01       	movw	r18, r22
 14e:	ac 01       	movw	r20, r24
 150:	bd 01       	movw	r22, r26
 152:	cf 01       	movw	r24, r30
 154:	08 95       	ret

00000156 <__umulhisi3>:
 156:	a2 9f       	mul	r26, r18
 158:	b0 01       	movw	r22, r0
 15a:	b3 9f       	mul	r27, r19
 15c:	c0 01       	movw	r24, r0
 15e:	a3 9f       	mul	r26, r19
 160:	70 0d       	add	r23, r0
 162:	81 1d       	adc	r24, r1
 164:	11 24       	eor	r1, r1
 166:	91 1d       	adc	r25, r1
 168:	b2 9f       	mul	r27, r18
 16a:	70 0d       	add	r23, r0
 16c:	81 1d       	adc	r24, r1
 16e:	11 24       	eor	r1, r1
 170:	91 1d       	adc	r25, r1
 172:	08 95       	ret

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
