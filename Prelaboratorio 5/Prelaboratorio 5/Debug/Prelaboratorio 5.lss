
Prelaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c1  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a4  00000000  00000000  00002246  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000022ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
volatile uint16_t POTE1, POTE2, POTE3;
volatile uint8_t CANAL_ADC = 0;

// Configuración del Modulo ADC
void ADC_Init() {
	ADMUX = (1 << REFS0); // Selecciona VCC como referencia de voltaje
  90:	ac e7       	ldi	r26, 0x7C	; 124
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	8c 93       	st	X, r24
	ADCSRA = (1 << ADEN)  // Habilita el ADC
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8f e8       	ldi	r24, 0x8F	; 143
  9e:	80 83       	st	Z, r24
	| (1 << ADIE)  // Habilita interrupción por ADC
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
	ADMUX |= (CANAL_ADC & 0x07); // Selecciona canal inicial (PC0)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	9c 91       	ld	r25, X
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	89 2b       	or	r24, r25
  aa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC); // Inicia la primera conversión
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <__vector_21>:
}

// RUTINA DE INTERRUPCIÓN DEL ADC
ISR(ADC_vect) {
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	switch (CANAL_ADC) {
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	69 f0       	breq	.+26     	; 0xf2 <__vector_21+0x3e>
  d8:	18 f0       	brcs	.+6      	; 0xe0 <__vector_21+0x2c>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	99 f0       	breq	.+38     	; 0x104 <__vector_21+0x50>
  de:	1a c0       	rjmp	.+52     	; 0x114 <__vector_21+0x60>
		case 0: POTE1 = ADC; break;
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <POTE1+0x1>
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <POTE1>
  f0:	11 c0       	rjmp	.+34     	; 0x114 <__vector_21+0x60>
		case 1: POTE2 = ADC; break;
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <POTE2+0x1>
  fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <POTE2>
 102:	08 c0       	rjmp	.+16     	; 0x114 <__vector_21+0x60>
		case 2: POTE3 = ADC; break;
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <POTE3+0x1>
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <POTE3>
	}
	// Cambia al siguiente canal (0 ? 1 ? 2 ? 0 ...)
	CANAL_ADC = (CANAL_ADC + 1) % 3;
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 19 01 	call	0x232	; 0x232 <__divmodhi4>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADMUX = (ADMUX & 0xF0) | (CANAL_ADC & 0x07); // Actualiza canal sin afectar la referencia
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 7f       	andi	r25, 0xF0	; 240
 134:	87 70       	andi	r24, 0x07	; 7
 136:	89 2b       	or	r24, r25
 138:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Inicia nueva conversión
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	bf 91       	pop	r27
 14a:	af 91       	pop	r26
 14c:	9f 91       	pop	r25
 14e:	8f 91       	pop	r24
 150:	7f 91       	pop	r23
 152:	6f 91       	pop	r22
 154:	5f 91       	pop	r21
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <main>:

// Programa Principal
int main(void) {
	ADC_Init();
 160:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	Timer1_Config_Init();
 164:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Timer1_Config_Init>
    Timer1_Servo1_Init();
 168:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Timer1_Servo1_Init>
    Timer1_Servo2_Init();
 16c:	0e 94 06 01 	call	0x20c	; 0x20c <Timer1_Servo2_Init>
    Timer0_LED_Init();
 170:	0e 94 0f 01 	call	0x21e	; 0x21e <Timer0_LED_Init>
	sei(); // Habilita interrupciones globales
 174:	78 94       	sei

	while (1) {
		// El valor del potenciómetro va de 0 a 1023 (10 bits), se escala a un pulso entre 500 y 2500 (?s)
		// 500 + ((0-1023) * 2000 / 1023) ? [500, 2500]
		SERVO1_set(500 + (POTE1 * 2000UL / 1023)); // Controla el servo 1
 176:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <POTE1>
 17a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <POTE1+0x1>
 17e:	a0 ed       	ldi	r26, 0xD0	; 208
 180:	b7 e0       	ldi	r27, 0x07	; 7
 182:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 186:	0f 2e       	mov	r0, r31
 188:	cc 24       	eor	r12, r12
 18a:	ca 94       	dec	r12
 18c:	f3 e0       	ldi	r31, 0x03	; 3
 18e:	df 2e       	mov	r13, r31
 190:	e1 2c       	mov	r14, r1
 192:	f1 2c       	mov	r15, r1
 194:	f0 2d       	mov	r31, r0
 196:	a7 01       	movw	r20, r14
 198:	96 01       	movw	r18, r12
 19a:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 19e:	c9 01       	movw	r24, r18
 1a0:	8c 50       	subi	r24, 0x0C	; 12
 1a2:	9e 4f       	sbci	r25, 0xFE	; 254
 1a4:	0e 94 01 01 	call	0x202	; 0x202 <SERVO1_set>
		SERVO2_set(500 + (POTE2 * 2000UL / 1023)); // Controla el servo 2
 1a8:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <POTE2>
 1ac:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <POTE2+0x1>
 1b0:	a0 ed       	ldi	r26, 0xD0	; 208
 1b2:	b7 e0       	ldi	r27, 0x07	; 7
 1b4:	0e 94 4f 01 	call	0x29e	; 0x29e <__umulhisi3>
 1b8:	a7 01       	movw	r20, r14
 1ba:	96 01       	movw	r18, r12
 1bc:	0e 94 2d 01 	call	0x25a	; 0x25a <__udivmodsi4>
 1c0:	c9 01       	movw	r24, r18
 1c2:	8c 50       	subi	r24, 0x0C	; 12
 1c4:	9e 4f       	sbci	r25, 0xFE	; 254
 1c6:	0e 94 0a 01 	call	0x214	; 0x214 <SERVO2_set>
		LED_set(POTE3 >> 2); // Controla el brillo del LED (1023 >> 2 = 255 máximo)
 1ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <POTE3>
 1ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <POTE3+0x1>
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	0e 94 17 01 	call	0x22e	; 0x22e <LED_set>
 1de:	cb cf       	rjmp	.-106    	; 0x176 <main+0x16>

000001e0 <Timer1_Config_Init>:

#include <avr/io.h>
#include "timer1_config.h"

void Timer1_Config_Init(void) {
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11); // PWM
 1e0:	82 ea       	ldi	r24, 0xA2	; 162
 1e2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8
 1e6:	82 e1       	ldi	r24, 0x12	; 18
 1e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 20000; // 20ms
 1ec:	80 e2       	ldi	r24, 0x20	; 32
 1ee:	9e e4       	ldi	r25, 0x4E	; 78
 1f0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1f4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1f8:	08 95       	ret

000001fa <Timer1_Servo1_Init>:
// pwm.c
#include <avr/io.h>
#include "timer1_servo1.h"

void Timer1_Servo1_Init(void) {
	DDRB |= (1 << PINB1); // PB1 como salida
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	84 b9       	out	0x04, r24	; 4
 200:	08 95       	ret

00000202 <SERVO1_set>:
	// No se configura el timer completo aquí
	// Solo se asume que Timer1 ya está configurado en otra libreria
}

void SERVO1_set(uint16_t pulso) {
	OCR1A = pulso;
 202:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 206:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 20a:	08 95       	ret

0000020c <Timer1_Servo2_Init>:

#include <avr/io.h>
#include "timer1_servo2.h"

void Timer1_Servo2_Init(void) {
	DDRB |= (1 << PINB2); // PB2 como salida
 20c:	84 b1       	in	r24, 0x04	; 4
 20e:	84 60       	ori	r24, 0x04	; 4
 210:	84 b9       	out	0x04, r24	; 4
 212:	08 95       	ret

00000214 <SERVO2_set>:
	// Solo habilita el pin, Timer1 debe estar configurado antes
}

void SERVO2_set(uint16_t pulso) {
	OCR1B = pulso;
 214:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 218:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 21c:	08 95       	ret

0000021e <Timer0_LED_Init>:

#include <avr/io.h>
#include "timer0_led.h"

void Timer0_LED_Init(void) {
	DDRD |= (1 << PIND5); // PD5 como salida
 21e:	8a b1       	in	r24, 0x0a	; 10
 220:	80 62       	ori	r24, 0x20	; 32
 222:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); // Fast PWM
 224:	83 e2       	ldi	r24, 0x23	; 35
 226:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	85 bd       	out	0x25, r24	; 37
 22c:	08 95       	ret

0000022e <LED_set>:
}

void LED_set(uint8_t brillo) {
	OCR0B = brillo;
 22e:	88 bd       	out	0x28, r24	; 40
 230:	08 95       	ret

00000232 <__divmodhi4>:
 232:	97 fb       	bst	r25, 7
 234:	07 2e       	mov	r0, r23
 236:	16 f4       	brtc	.+4      	; 0x23c <__divmodhi4+0xa>
 238:	00 94       	com	r0
 23a:	07 d0       	rcall	.+14     	; 0x24a <__divmodhi4_neg1>
 23c:	77 fd       	sbrc	r23, 7
 23e:	09 d0       	rcall	.+18     	; 0x252 <__divmodhi4_neg2>
 240:	0e 94 5e 01 	call	0x2bc	; 0x2bc <__udivmodhi4>
 244:	07 fc       	sbrc	r0, 7
 246:	05 d0       	rcall	.+10     	; 0x252 <__divmodhi4_neg2>
 248:	3e f4       	brtc	.+14     	; 0x258 <__divmodhi4_exit>

0000024a <__divmodhi4_neg1>:
 24a:	90 95       	com	r25
 24c:	81 95       	neg	r24
 24e:	9f 4f       	sbci	r25, 0xFF	; 255
 250:	08 95       	ret

00000252 <__divmodhi4_neg2>:
 252:	70 95       	com	r23
 254:	61 95       	neg	r22
 256:	7f 4f       	sbci	r23, 0xFF	; 255

00000258 <__divmodhi4_exit>:
 258:	08 95       	ret

0000025a <__udivmodsi4>:
 25a:	a1 e2       	ldi	r26, 0x21	; 33
 25c:	1a 2e       	mov	r1, r26
 25e:	aa 1b       	sub	r26, r26
 260:	bb 1b       	sub	r27, r27
 262:	fd 01       	movw	r30, r26
 264:	0d c0       	rjmp	.+26     	; 0x280 <__udivmodsi4_ep>

00000266 <__udivmodsi4_loop>:
 266:	aa 1f       	adc	r26, r26
 268:	bb 1f       	adc	r27, r27
 26a:	ee 1f       	adc	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	a2 17       	cp	r26, r18
 270:	b3 07       	cpc	r27, r19
 272:	e4 07       	cpc	r30, r20
 274:	f5 07       	cpc	r31, r21
 276:	20 f0       	brcs	.+8      	; 0x280 <__udivmodsi4_ep>
 278:	a2 1b       	sub	r26, r18
 27a:	b3 0b       	sbc	r27, r19
 27c:	e4 0b       	sbc	r30, r20
 27e:	f5 0b       	sbc	r31, r21

00000280 <__udivmodsi4_ep>:
 280:	66 1f       	adc	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	88 1f       	adc	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	1a 94       	dec	r1
 28a:	69 f7       	brne	.-38     	; 0x266 <__udivmodsi4_loop>
 28c:	60 95       	com	r22
 28e:	70 95       	com	r23
 290:	80 95       	com	r24
 292:	90 95       	com	r25
 294:	9b 01       	movw	r18, r22
 296:	ac 01       	movw	r20, r24
 298:	bd 01       	movw	r22, r26
 29a:	cf 01       	movw	r24, r30
 29c:	08 95       	ret

0000029e <__umulhisi3>:
 29e:	a2 9f       	mul	r26, r18
 2a0:	b0 01       	movw	r22, r0
 2a2:	b3 9f       	mul	r27, r19
 2a4:	c0 01       	movw	r24, r0
 2a6:	a3 9f       	mul	r26, r19
 2a8:	70 0d       	add	r23, r0
 2aa:	81 1d       	adc	r24, r1
 2ac:	11 24       	eor	r1, r1
 2ae:	91 1d       	adc	r25, r1
 2b0:	b2 9f       	mul	r27, r18
 2b2:	70 0d       	add	r23, r0
 2b4:	81 1d       	adc	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	91 1d       	adc	r25, r1
 2ba:	08 95       	ret

000002bc <__udivmodhi4>:
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	51 e1       	ldi	r21, 0x11	; 17
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <__udivmodhi4_ep>

000002c4 <__udivmodhi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	a6 17       	cp	r26, r22
 2ca:	b7 07       	cpc	r27, r23
 2cc:	10 f0       	brcs	.+4      	; 0x2d2 <__udivmodhi4_ep>
 2ce:	a6 1b       	sub	r26, r22
 2d0:	b7 0b       	sbc	r27, r23

000002d2 <__udivmodhi4_ep>:
 2d2:	88 1f       	adc	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	5a 95       	dec	r21
 2d8:	a9 f7       	brne	.-22     	; 0x2c4 <__udivmodhi4_loop>
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	bc 01       	movw	r22, r24
 2e0:	cd 01       	movw	r24, r26
 2e2:	08 95       	ret

000002e4 <_exit>:
 2e4:	f8 94       	cli

000002e6 <__stop_program>:
 2e6:	ff cf       	rjmp	.-2      	; 0x2e6 <__stop_program>
