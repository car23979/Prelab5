
Prelaboratorio 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000035a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fb  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000763  00000000  00000000  00000d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000451  00000000  00000000  000014b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ca  00000000  00000000  00001de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001eb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  88:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <ADC_Init>:
volatile uint16_t potValue1, potValue2, potValue3; // Variables para leer valores de los potenciometros
volatile uint8_t adcChannel = 0;	// Canal actual de ADC

// Configuración del Modulo ADC
void ADC_Init() {
	ADMUX = (1 << REFS0); // Selecciona VCC como referencia de voltaje
  90:	ac e7       	ldi	r26, 0x7C	; 124
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	8c 93       	st	X, r24
	ADCSRA = (1 << ADEN)  // Habilita el ADC
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8f e8       	ldi	r24, 0x8F	; 143
  9e:	80 83       	st	Z, r24
	| (1 << ADIE)  // Habilita interrupción por ADC
	| (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Prescaler 128
	ADMUX |= (adcChannel & 0x07); // Selecciona canal inicial (PC0)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	9c 91       	ld	r25, X
  a6:	87 70       	andi	r24, 0x07	; 7
  a8:	89 2b       	or	r24, r25
  aa:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADSC); // Inicia la primera conversión
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
  b2:	08 95       	ret

000000b4 <__vector_21>:
}

// RUTINA DE INTERRUPCIÓN DEL ADC
ISR(ADC_vect) {
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	switch (adcChannel) {
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	69 f0       	breq	.+26     	; 0xf2 <__vector_21+0x3e>
  d8:	18 f0       	brcs	.+6      	; 0xe0 <__vector_21+0x2c>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	99 f0       	breq	.+38     	; 0x104 <__vector_21+0x50>
  de:	1b c0       	rjmp	.+54     	; 0x116 <__vector_21+0x62>
		case 0:
		potValue1 = ADC; // Guarda lectura del primer potenciómetro
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e8:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <potValue1+0x1>
  ec:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <potValue1>
		break;
  f0:	1a c0       	rjmp	.+52     	; 0x126 <__vector_21+0x72>
		case 1:
		potValue2 = ADC; // Guarda lectura del segundo potenciómetro
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <potValue2+0x1>
  fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <potValue2>
		break;
 102:	11 c0       	rjmp	.+34     	; 0x126 <__vector_21+0x72>
		case 2:
		potValue3 = ADC; // Guarda lectura del tercer potenciómetro
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 10c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <potValue3+0x1>
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <potValue3>
		break;
 114:	08 c0       	rjmp	.+16     	; 0x126 <__vector_21+0x72>
		default:
		potValue1 = ADC; // Valor de respaldo
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 11a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 11e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <potValue1+0x1>
 122:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <potValue1>
		break;
	}
	// Cambia al siguiente canal (0 ? 1 ? 2 ? 0 ...)
	adcChannel = (adcChannel + 1) % 3;
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 18 01 	call	0x230	; 0x230 <__divmodhi4>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	ADMUX = (ADMUX & 0xF0) | (adcChannel & 0x07); // Actualiza canal sin afectar la referencia
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 144:	90 7f       	andi	r25, 0xF0	; 240
 146:	87 70       	andi	r24, 0x07	; 7
 148:	89 2b       	or	r24, r25
 14a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Inicia nueva conversión
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	80 64       	ori	r24, 0x40	; 64
 154:	80 83       	st	Z, r24
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <main>:

// Programa Principal
int main(void) {
	
	ADC_Init(); // Inicializa ADC
 172:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Init>
	PWM_Init(); // Inicializa PWM (definido en PWM.c)
 176:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PWM_Init>
	sei(); // Habilita interrupciones globales
 17a:	78 94       	sei

	while (1) {
		// El valor del potenciómetro va de 0 a 1023 (10 bits), se escala a un pulso entre 500 y 2500 (?s)
		// 500 + ((0-1023) * 2000 / 1023) ? [500, 2500]
		setServo1(500 + (potValue1 * 2000UL / 1023)); // Controla el servo 1
 17c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <potValue1>
 180:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <potValue1+0x1>
 184:	a0 ed       	ldi	r26, 0xD0	; 208
 186:	b7 e0       	ldi	r27, 0x07	; 7
 188:	0e 94 4e 01 	call	0x29c	; 0x29c <__umulhisi3>
 18c:	0f 2e       	mov	r0, r31
 18e:	cc 24       	eor	r12, r12
 190:	ca 94       	dec	r12
 192:	f3 e0       	ldi	r31, 0x03	; 3
 194:	df 2e       	mov	r13, r31
 196:	e1 2c       	mov	r14, r1
 198:	f1 2c       	mov	r15, r1
 19a:	f0 2d       	mov	r31, r0
 19c:	a7 01       	movw	r20, r14
 19e:	96 01       	movw	r18, r12
 1a0:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodsi4>
 1a4:	c9 01       	movw	r24, r18
 1a6:	8c 50       	subi	r24, 0x0C	; 12
 1a8:	9e 4f       	sbci	r25, 0xFE	; 254
 1aa:	0e 94 0a 01 	call	0x214	; 0x214 <setServo1>
		setServo2(500 + (potValue2 * 2000UL / 1023)); // Controla el servo 2
 1ae:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <potValue2>
 1b2:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <potValue2+0x1>
 1b6:	a0 ed       	ldi	r26, 0xD0	; 208
 1b8:	b7 e0       	ldi	r27, 0x07	; 7
 1ba:	0e 94 4e 01 	call	0x29c	; 0x29c <__umulhisi3>
 1be:	a7 01       	movw	r20, r14
 1c0:	96 01       	movw	r18, r12
 1c2:	0e 94 2c 01 	call	0x258	; 0x258 <__udivmodsi4>
 1c6:	c9 01       	movw	r24, r18
 1c8:	8c 50       	subi	r24, 0x0C	; 12
 1ca:	9e 4f       	sbci	r25, 0xFE	; 254
 1cc:	0e 94 11 01 	call	0x222	; 0x222 <setServo2>
		setLED(potValue3 >> 2); // Controla el brillo del LED (1023 >> 2 = 255 máximo)
 1d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <potValue3>
 1d4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <potValue3+0x1>
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	0e 94 0f 01 	call	0x21e	; 0x21e <setLED>
 1e4:	cb cf       	rjmp	.-106    	; 0x17c <main+0xa>

000001e6 <PWM_Init>:
// pwm.c
#include "pwm.h"

void PWM_Init() {
	// Configura Timer1 (16 bits) para servo1
	DDRB |= (1 << PINB1); // Define PB1 como salida
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << WGM11); // Modo PWM Phase Correct, sin inversión
 1ec:	82 e8       	ldi	r24, 0x82	; 130
 1ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << CS11); // Prescaler 8, modo PWM con TOP = ICR1
 1f2:	82 e1       	ldi	r24, 0x12	; 18
 1f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 20000; // TOP ? 20,000 ciclos a 16 MHz/8 = 20 ms ? 50 Hz (frecuencia típica para servos)	
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	9e e4       	ldi	r25, 0x4E	; 78
 1fc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 200:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	// Configura Timer0 (8 bits) en modo Fast PWM para el control de LED
	DDRD |= (1 << PIND5); // PD5 como salida
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	80 62       	ori	r24, 0x20	; 32
 208:	8a b9       	out	0x0a, r24	; 10
	TCCR0A = (1 << COM0B1) | (1 << WGM01) | (1 << WGM00); // Fast PWM no invertido
 20a:	83 e2       	ldi	r24, 0x23	; 35
 20c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS01) | (1 << CS00); // Prescaler 64 ? ~976 Hz
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	85 bd       	out	0x25, r24	; 37
 212:	08 95       	ret

00000214 <setServo1>:
}

void setServo1(uint16_t pulseWidth) {
	OCR1A = pulseWidth; // Aplica pulso al canal A (PB1)
 214:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 218:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 21c:	08 95       	ret

0000021e <setLED>:
}

void setLED(uint8_t brightness) {
	OCR0B = brightness; // Ajusta el duty cycle del LED (PD5)
 21e:	88 bd       	out	0x28, r24	; 40
 220:	08 95       	ret

00000222 <setServo2>:
	ICR1 = 40000;
	OCR1B = 3000; // TOP ? 20,000 ciclos a 16 MHz/8 = 20 ms ? 50 Hz (frecuencia típica para servos)	
}

void setServo2(uint16_t pulseWidth) {
	OCR1B = (uint16_t)(pulseWidth * 2); // Aplica pulso al canal B (PB2)
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 22a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 22e:	08 95       	ret

00000230 <__divmodhi4>:
 230:	97 fb       	bst	r25, 7
 232:	07 2e       	mov	r0, r23
 234:	16 f4       	brtc	.+4      	; 0x23a <__divmodhi4+0xa>
 236:	00 94       	com	r0
 238:	07 d0       	rcall	.+14     	; 0x248 <__divmodhi4_neg1>
 23a:	77 fd       	sbrc	r23, 7
 23c:	09 d0       	rcall	.+18     	; 0x250 <__divmodhi4_neg2>
 23e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <__udivmodhi4>
 242:	07 fc       	sbrc	r0, 7
 244:	05 d0       	rcall	.+10     	; 0x250 <__divmodhi4_neg2>
 246:	3e f4       	brtc	.+14     	; 0x256 <__divmodhi4_exit>

00000248 <__divmodhi4_neg1>:
 248:	90 95       	com	r25
 24a:	81 95       	neg	r24
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	08 95       	ret

00000250 <__divmodhi4_neg2>:
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255

00000256 <__divmodhi4_exit>:
 256:	08 95       	ret

00000258 <__udivmodsi4>:
 258:	a1 e2       	ldi	r26, 0x21	; 33
 25a:	1a 2e       	mov	r1, r26
 25c:	aa 1b       	sub	r26, r26
 25e:	bb 1b       	sub	r27, r27
 260:	fd 01       	movw	r30, r26
 262:	0d c0       	rjmp	.+26     	; 0x27e <__udivmodsi4_ep>

00000264 <__udivmodsi4_loop>:
 264:	aa 1f       	adc	r26, r26
 266:	bb 1f       	adc	r27, r27
 268:	ee 1f       	adc	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	a2 17       	cp	r26, r18
 26e:	b3 07       	cpc	r27, r19
 270:	e4 07       	cpc	r30, r20
 272:	f5 07       	cpc	r31, r21
 274:	20 f0       	brcs	.+8      	; 0x27e <__udivmodsi4_ep>
 276:	a2 1b       	sub	r26, r18
 278:	b3 0b       	sbc	r27, r19
 27a:	e4 0b       	sbc	r30, r20
 27c:	f5 0b       	sbc	r31, r21

0000027e <__udivmodsi4_ep>:
 27e:	66 1f       	adc	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	88 1f       	adc	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	1a 94       	dec	r1
 288:	69 f7       	brne	.-38     	; 0x264 <__udivmodsi4_loop>
 28a:	60 95       	com	r22
 28c:	70 95       	com	r23
 28e:	80 95       	com	r24
 290:	90 95       	com	r25
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	bd 01       	movw	r22, r26
 298:	cf 01       	movw	r24, r30
 29a:	08 95       	ret

0000029c <__umulhisi3>:
 29c:	a2 9f       	mul	r26, r18
 29e:	b0 01       	movw	r22, r0
 2a0:	b3 9f       	mul	r27, r19
 2a2:	c0 01       	movw	r24, r0
 2a4:	a3 9f       	mul	r26, r19
 2a6:	70 0d       	add	r23, r0
 2a8:	81 1d       	adc	r24, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	91 1d       	adc	r25, r1
 2ae:	b2 9f       	mul	r27, r18
 2b0:	70 0d       	add	r23, r0
 2b2:	81 1d       	adc	r24, r1
 2b4:	11 24       	eor	r1, r1
 2b6:	91 1d       	adc	r25, r1
 2b8:	08 95       	ret

000002ba <__udivmodhi4>:
 2ba:	aa 1b       	sub	r26, r26
 2bc:	bb 1b       	sub	r27, r27
 2be:	51 e1       	ldi	r21, 0x11	; 17
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <__udivmodhi4_ep>

000002c2 <__udivmodhi4_loop>:
 2c2:	aa 1f       	adc	r26, r26
 2c4:	bb 1f       	adc	r27, r27
 2c6:	a6 17       	cp	r26, r22
 2c8:	b7 07       	cpc	r27, r23
 2ca:	10 f0       	brcs	.+4      	; 0x2d0 <__udivmodhi4_ep>
 2cc:	a6 1b       	sub	r26, r22
 2ce:	b7 0b       	sbc	r27, r23

000002d0 <__udivmodhi4_ep>:
 2d0:	88 1f       	adc	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	5a 95       	dec	r21
 2d6:	a9 f7       	brne	.-22     	; 0x2c2 <__udivmodhi4_loop>
 2d8:	80 95       	com	r24
 2da:	90 95       	com	r25
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
